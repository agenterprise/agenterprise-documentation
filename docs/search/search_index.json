{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Agenterprise \u2013 Model-Driven &amp; Agentic Software Development","text":"<p>NOTE: Agenterprise is currently in Alpha Phase</p> <ul> <li>Model-driven, agentic enterprise software meets GenAI</li> <li>Architecture decoupled from technology</li> <li>Liveline from PoC to Enterprise Setups</li> <li>Open source stability reduces technology and vendor logi</li> </ul> <p>Agenterprise is an open source project focused on model-driven software development for agentic enterprise architectures and beyond. The goal is to enable intelligent solutions that remain independent of specific libraries and frameworks, by decoupling architecture from technology choices.</p> <p>With Agenterprise's domain-specific language (DSL), you can describe your AI and agentic architectures in a technology-neutral way. This makes it possible to generate different tech stacks or service stacks from the same model, adapting flexibly to changing requirements or platforms.</p> <p>This approach allows:</p> <ul> <li>Separation of business logic and technical implementation</li> <li>Decoupling enterprise architecture from vendor or framework dependencies</li> <li>Integration with various AI and agent technologies</li> </ul> <p>Generative AI is rapidly accelerating software development. However, if you need a stable, enterprise-ready foundation that can be combined with GenAI features, Agenterprise provides a robust and flexible base to build on.</p> <p>Agenterprise invites everyone interested in flexible, scalable, and sustainable software to explore model-driven development and DSLs for agentic enterprise solutions.</p>"},{"location":"dsl/","title":"The Agenterprise.ai DSL","text":""},{"location":"dsl/#dsl-levels-overview","title":"DSL Levels Overview","text":"<p>The Agenterprise DSL is structured in distinct layers as levels, each representing a core aspect of agentic, model-driven enterprise systems. The following example illustrates the main levels:</p> <p>1. Environment Level Defines the overall AI environment or context for the system.</p> <pre><code>ai_environment \"AgentMicroservice\"\n</code></pre> <p>2. Architecture Level Describes the architecture, including environment IDs and technology stacks for services and AI components.</p> <pre><code>architecture{\n    envid = \"c672da0bd68f41f1b77442524cfa48c4\"\n    service-techstack = aiurn:techstack:github:www.github.com:agenterprise:service-layer-fastapi-base\n    ai-techstack = aiurn:techstack:github:www.github.com:agenterprise:ai-layer-pydanticai\n}\n</code></pre> <p>3. Infrastructure Level Specifies infrastructure resources such as LLMs, providers, endpoints, and versions.</p> <pre><code>infrastructure {\n    llm \"My LLM\" {\n        uid = aiurn:model:llm:geepeetee\n        provider = aiurn:provider:azure\n        model = \"gpt-4o\"\n        endpoint = \"https://gpt-mvo-sweden.openai.azure.com/openai/deployments/gpt-4o/chat/completions\"\n        version = \"2025-01-01-preview\"\n    }\n}\n</code></pre> <p>4. Functional Level Defines agents, tools, and their properties, including prompts, references, variables, and endpoints.</p> <pre><code>functional{\n    agent \"Cook\" {\n        uid = aiurn:agent:cook\n        namespace = aiurn:ns:janes_diner:kitchen\n        systemprompt = \"You're a four star rated metre\"\n        llmref = aiurn:model:llm:geepeetee \n        toolref = aiurn:tool:cooking:v1      \n        aiurn:var:name = \"Jane Smith\"\n        aiurn:var:role = \"manager\"\n        aiurn:var:lifeycle = \"permanent\"\n        aiurn:var:event = \"onRestaurantOpening\" \n    }\n    agent \"Waiter\" {\n        uid = aiurn:agent:waiter\n        namespace = aiurn:ns:janes_diner:guestroom\n        systemprompt = \"Du bist ein freundlicher und aufmerksamer Kellner\"\n        llmref = aiurn:model:llm:geepeetee \n        aiurn:var:name = \"Max Mustermann\"\n        aiurn:var:role = \"waiter\"\n        aiurn:var:lifeycle = \"permanent\"\n        aiurn:var:events = \"onRestaurantOpening\"\n    }\n    tool \"CookingApi\" {\n        uid = aiurn:tool:cooking:v1\n        endpoint = \"http://localhost:8000/mcp\"\n        type = aiurn:tooltype:mcp\n        description = \"Tool for finding good cooking combinations\"\n    }\n}\n</code></pre> <p>Each level in the DSL enables clear separation of concerns, making it possible to model, generate, and manage complex agentic enterprise systems in a technology-neutral and flexible way.</p>"},{"location":"dsl/ai-functional-layer/","title":"AI Functional Layer","text":"<p>This section covers the AI functional layer in the Agenterprise DSL. It describes how to define agents, their properties, prompts, references, and variables.</p> <ul> <li>How to specify agents and their logic</li> <li>Example usage</li> <li>Best practices</li> </ul>"},{"location":"dsl/architecture-layer/","title":"Architecture Layer","text":"<p>This section describes the architecture layer in the Agenterprise DSL. It covers how to define environment IDs, service tech stacks, and AI tech stacks for agentic enterprise systems.</p> <ul> <li>How to specify architecture blocks</li> <li>Example usage</li> <li>Best practices</li> </ul>"},{"location":"dsl/infrastruture-layer/","title":"Infrastructure Layer","text":"<p>This section explains the infrastructure layer in the Agenterprise DSL. It includes how to define LLMs, providers, endpoints, and versions for your agentic system.</p> <ul> <li>How to specify infrastructure resources</li> <li>Example usage</li> <li>Best practices</li> </ul>"},{"location":"dsl/service-layer/","title":"Service Layer","text":"<p>This section describes the service layer in the Agenterprise DSL. It explains how to define tools, endpoints, types, and descriptions for service integration.</p> <ul> <li>How to specify service tools</li> <li>Example usage</li> <li>Best practices\u00a0</li> </ul>"},{"location":"installation/","title":"Index","text":"<p>Work in Pogress</p>"}]}